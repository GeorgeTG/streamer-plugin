#!/usr/bin/env python2
import struct
import sys, os
import json

from LivestreamerWrapper import LivestreamerAsync, LivestreamerError

def send_message(message):
    #write 32bits length and then message
    sys.stdout.write(struct.pack('I', len(message)))
    sys.stdout.write(message)
    sys.stdout.flush()

def return_error(error):
    result = {
            'result': False,
            'message': error
            }
    send_message(json.dumps(result))

def return_success(action):
    result = {
            'result': True,
            'action': action
            }
    send_message(json.dumps(result))

def read_func():
    log_path = os.path.dirname(__file__)
    log_path = os.path.join(log_path, "run.log")
    with open(log_path, 'w') as f:
        try:
            #read 32bits, the length of the message as defined in spec.
            text_length_bytes = sys.stdin.read(4)
            if len(text_length_bytes) == 0:
                sys.exit(0)
            text_length = struct.unpack('i', text_length_bytes)[0]
            text = sys.stdin.read(text_length).decode('utf-8')
            ###########################################################
            
            #get requested action
            json_obj = json.loads(text)
            action = json_obj["action"]
            url = json_obj["args"]["url"]
            if action == "getQuality":
                quality_list = LivestreamerAsync.get_available_quality(url)
                if not quality_list:
                    return_error("Failed to get quality list")
                else:
                    result = {
                        'result': True,
                        'data': quality_list.keys(),
                        'action': action
                    }
                    send_message(json.dumps(result))
            elif action == "startStream":
                quality = json_obj["args"]["quality"]
                streamer = LivestreamerAsync(url)
                if streamer.start_streamer(quality):
                    return_success(action)
                else:
                    return_error("Cannot start stream")
        except LivestreamerError as err:
            f.write("error:" + str(err) + "\n")
            return_error(str(err))
        except Exception as ex:
            f.write("error:" + str(ex) + "\n")
            return_error(str(ex))

def main():
    read_func()
    sys.exit(0)
 
if __name__ == '__main__':
    main()
